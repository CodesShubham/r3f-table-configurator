/**
 * @description Table
 * @author      C. M. de Picciotto <d3p1@d3p1.dev> (https://d3p1.dev/)
 * @note        Auto-generated by: https://github.com/pmndrs/gltfjsx
 * @note        Command: `npx gltfjsx@6.5.3 -t public/model/table.gltf`
 */
import * as THREE from 'three'
import * as React from 'react'
import {useEffect, useRef} from 'react'
import {useGLTF} from '@react-three/drei'
import {useTableModelSize} from '../../hook/useTableModelSize.ts'
import {
  type GLTFResult,
  type TableModelType,
  TABLE_MODEL_TYPE,
  type TableModelColor,
} from '../../types'

type Props = React.JSX.IntrinsicElements['group'] & {
  modelType: TableModelType
  modelColor: TableModelColor
  modelSize: number
}

export const Table: React.FC<Props> = ({
  modelType,
  modelColor,
  modelSize,
  ...props
}) => {
  const {nodes, materials} = useGLTF(
    '/r3f-table-configurator/model/table.gltf',
  ) as unknown as GLTFResult

  const plateMeshRef = useRef<THREE.Mesh>(null)
  const leftLegMeshRef = useRef<THREE.Mesh>(null)
  const rightLegMeshRef = useRef<THREE.Mesh>(null)
  const {baseLeftLegPosition, baseRightLegPosition} = useTableModelSize({
    plateMesh: plateMeshRef.current,
    leftLegMesh: leftLegMeshRef.current,
    rightLegMesh: rightLegMeshRef.current,
    modelSize: modelSize,
  })

  useEffect(() => {
    materials.Metal.color.set(modelColor)
  }, [modelColor])

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={plateMeshRef}
        castShadow={true}
        geometry={nodes.Plate.geometry}
        material={materials.Plate}
      />

      {modelType === TABLE_MODEL_TYPE.CLASSIC.value && (
        <>
          <mesh
            ref={leftLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs01Left.geometry}
            material={materials.Metal}
            position={baseLeftLegPosition}
          />
          <mesh
            ref={rightLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs01Right.geometry}
            material={materials.Metal}
            position={baseRightLegPosition}
          />
        </>
      )}

      {modelType === TABLE_MODEL_TYPE.MODERN.value && (
        <>
          <mesh
            ref={leftLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs02Left.geometry}
            material={materials.Metal}
            position={baseLeftLegPosition}
          />
          <mesh
            ref={rightLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs02Right.geometry}
            material={materials.Metal}
            position={baseRightLegPosition}
          />
        </>
      )}

      {modelType === TABLE_MODEL_TYPE.MINIMALISTIC.value && (
        <>
          <mesh
            ref={leftLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs03Left.geometry}
            material={materials.Metal}
            position={baseLeftLegPosition}
          />
          <mesh
            ref={rightLegMeshRef}
            castShadow={true}
            geometry={nodes.Legs03Right.geometry}
            material={materials.Metal}
            position={baseRightLegPosition}
          />
        </>
      )}
    </group>
  )
}

useGLTF.preload('/r3f-table-configurator/model/table.gltf')
